     1                                  ;REVERSE HALF PART OF PROJ3 - TRANSFORM.ASM
     2                                  
     3                                         extern  printf
     4                                          section .data
     5 00000000 456E74657220612073-     string_req:     db      "Enter a string: ", 10
     5 00000009 7472696E673A200A   
     6                                  len_s:          equ     $-string_req
     7                                  
     8                                  
     9 00000011 456E7465722061206E-     num_req:        db      "Enter a number (1-99): ", 10
     9 0000001A 756D6265722028312D-
     9 00000023 3939293A200A       
    10                                  len_n:          equ     $-num_req
    11                                  
    12 00000029 0A                      new_line:       db      10
    13 0000002A 00                      single_num:     db      0
    14 0000002B 0A                      b_ten:          db      10
    15 0000002C 00                      rand_seed:      db      0
    16 0000002D 0000000000000000        randnum:        dq      0
    17                                  
    18                                  ;fmt:            db      "%ld = maxrand(%ld,%ld)",10,0
    19 00000035 25730A00                fmt_s:    	db 	"%s", 10, 0          ; The printf format, "\n",'0'
    20                                  
    21                                  
    22                                  
    23                                         section .bss
    24 00000000 <res FFh>               string_buff:    resb    255 ;stores input string_req from user
    25 000000FF ??????                  num_buff:       resb    3 ;stores input num_req from user
    26 00000102 ??                      char_buff:      resb    1
    27 00000103 ??                      decimal_buff:   resb    1
    28 00000104 <res FFh>               result:         resb    255
    29                                  
    30                                  
    31                                  
    32                                          section .text
    33                                          global main
    34                                  
    35                                  print:
    36 00000000 B800000000              	mov	rax, 0
    37 00000005 BF00000000              	mov	rdi, 0
    38 0000000A 0F05                    	syscall
    39 0000000C C3                      	ret	
    40                                  
    41                                  main:
    42 0000000D 4831C0                          xor rax, rax
    43 00000010 4D31C9                          xor r9, r9
    44 00000013 4831F6                          xor rsi, rsi
    45                                  
    46                                  user_string:
    47                                          ;prints out enter a string prompt from section.data
    48 00000016 B801000000                      mov	rax, 1 
    49 0000001B BF01000000                      mov	rdi, 1
    50 00000020 48BE-                           mov	rsi, string_req
    50 00000022 [0000000000000000] 
    51 0000002A BA11000000                      mov 	rdx, len_s
    52 0000002F 0F05                            syscall
    53                                          
    54                                          ;what's reading in from stdin input - keyboard
    55 00000031 B800000000                      mov 	rax, 0
    56 00000036 BF00000000                      mov 	rdi, 0
    57 0000003B 48BE-                           mov 	rsi, string_buff ;stores input into string_buff
    57 0000003D [0000000000000000] 
    58 00000045 BAFF000000                      mov 	rdx, 255 ;check to see if this can be changed dyanmically from string_req - len_s
    59                                          ;remember enter key counts as a character
    60 0000004A 0F05                            syscall
    61                                          
    62 0000004C 4889C2                  	mov 	rdx, rax ;gets length of string
    63                                          ;call printf  ;calls print label and prints out string unedited
    64                                  
    65 0000004F 49B8-                           mov 	r8, string_buff
    65 00000051 [0000000000000000] 
    66 00000059 4D31C9                          xor 	r9, r9
    67 0000005C EB00                    	jmp	half
    68                                  
    69                                  
    70                                  
    71                                  
    72                                  half:
    73                                  	;getting the 1st half tester area
    74 0000005E 4D31DB                  	xor	r11, r11
    75 00000061 4D31E4                  	xor	r12, r12
    76 00000064 41BB02000000            	mov	r11, 2
    77 0000006A 49F7F3                  	div	r11
    78 0000006D 4989C4                  	mov	r12, rax
    79                                  	
    80 00000070 E88BFFFFFF              	call	print
    81                                  
    82                                  
    83                                  
    84                                  
    85                                  
    86                                  
    87                                  
    88                                  
    89                                  
    90 00000075 EB00                    	jmp	exit
    91                                  exit:
    92 00000077 B83C000000                      mov     rax, 60
    93 0000007C 4831FF                          xor     rdi, rdi
    94 0000007F 0F05                            syscall
    95                                  
